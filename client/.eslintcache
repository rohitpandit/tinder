[{"/home/rohit/dev/tinder/client/src/index.js":"1","/home/rohit/dev/tinder/client/src/App.js":"2","/home/rohit/dev/tinder/client/src/pages/Signup.js":"3","/home/rohit/dev/tinder/client/src/pages/Login.js":"4","/home/rohit/dev/tinder/client/src/pages/Match.js":"5","/home/rohit/dev/tinder/client/src/pages/Chat.js":"6","/home/rohit/dev/tinder/client/src/pages/Index.js":"7","/home/rohit/dev/tinder/client/src/pages/Profile.js":"8","/home/rohit/dev/tinder/client/src/component/layout/Navbar.js":"9","/home/rohit/dev/tinder/client/src/pages/PageNotFound.js":"10","/home/rohit/dev/tinder/client/src/component/layout/Footer.js":"11","/home/rohit/dev/tinder/client/src/component/Image.js":"12","/home/rohit/dev/tinder/client/src/component/Loading.js":"13","/home/rohit/dev/tinder/client/src/uitls/history.js":"14"},{"size":214,"mtime":1612260895624,"results":"15","hashOfConfig":"16"},{"size":2985,"mtime":1614307414004,"results":"17","hashOfConfig":"16"},{"size":3156,"mtime":1612961662729,"results":"18","hashOfConfig":"16"},{"size":2417,"mtime":1613269188290,"results":"19","hashOfConfig":"16"},{"size":1754,"mtime":1614436505865,"results":"20","hashOfConfig":"16"},{"size":3687,"mtime":1614436403136,"results":"21","hashOfConfig":"16"},{"size":5790,"mtime":1614479906883,"results":"22","hashOfConfig":"16"},{"size":12564,"mtime":1614447119950,"results":"23","hashOfConfig":"16"},{"size":1959,"mtime":1614436604491,"results":"24","hashOfConfig":"16"},{"size":355,"mtime":1613448914743,"results":"25","hashOfConfig":"16"},{"size":267,"mtime":1614435258330,"results":"26","hashOfConfig":"16"},{"size":261,"mtime":1612754374315,"results":"27","hashOfConfig":"16"},{"size":300,"mtime":1613276604178,"results":"28","hashOfConfig":"16"},{"size":88,"mtime":1612883389642,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"650lu5",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/rohit/dev/tinder/client/src/index.js",[],["60","61"],"/home/rohit/dev/tinder/client/src/App.js",[],"/home/rohit/dev/tinder/client/src/pages/Signup.js",[],"/home/rohit/dev/tinder/client/src/pages/Login.js",[],"/home/rohit/dev/tinder/client/src/pages/Match.js",[],"/home/rohit/dev/tinder/client/src/pages/Chat.js",["62","63","64","65"],"import React, { useState, useEffect, useCallback, Fragment } from 'react';\nimport { io } from 'socket.io-client';\nimport moment from 'moment';\nimport Navbar from '../component/layout/Navbar';\nimport Footer from '../component/layout/Footer';\n\nlet id = 0;\nconst recipient = window.location.pathname.split('/')[2];\nconsole.log(recipient);\n\nif (localStorage.getItem('token')) {\n\tid = localStorage.getItem('token');\n}\n\nconst socket = io('http://localhost:5004', { query: { id } });\n\n//chat storing locally to the localstore\nlet conversation = null;\nif (!localStorage.getItem(`conversations[${recipient}]`)) {\n\tlocalStorage.setItem(`conversations[${recipient}]`, []);\n\tconversation = [];\n} else {\n\tconversation = JSON.parse(\n\t\tlocalStorage.getItem(`conversations[${recipient}]`)\n\t);\n}\n\nconst Chat = ({ setIsLogged, setTotalViewed }) => {\n\tconst [chat, setChat] = useState(conversation);\n\tconst [message, setMessage] = useState('');\n\n\t//function for settting the view into the last message\n\tconst setRef = useCallback((node) => {\n\t\tif (node) {\n\t\t\tnode.scrollIntoView({ smooth: true });\n\t\t}\n\t});\n\n\t//function to store the message to the localstore\n\t//this function handles all the messages\n\tconst addToChat = ({ sender, message }) => {\n\t\tconsole.log(sender);\n\t\tconsole.log('added to chat');\n\n\t\tsetChat([...chat, { sender, message }]);\n\n\t\tlocalStorage.setItem(`conversations[${recipient}]`, JSON.stringify(chat));\n\t\tsetMessage('');\n\t};\n\n\t//function for handling the message sending form the user\n\tconst onMessageSend = (sendTo, message) => {\n\t\tconsole.log(chat);\n\t\tsocket.emit('send-message', { recipient: sendTo, message });\n\t\taddToChat({ sender: 'You', message });\n\t};\n\n\tconst onSubmitHandler = (e) => {\n\t\te.preventDefault();\n\n\t\tif (message.length > 0) {\n\t\t\tonMessageSend(recipient, message);\n\t\t\tsetMessage('');\n\t\t}\n\n\t\tdocument.getElementById('message-input').focus();\n\t};\n\n\tuseEffect(() => {\n\t\tif (socket == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tsocket.on('recieve-message', addToChat);\n\n\t\treturn () => socket.off('recieve-message');\n\t}, [socket, addToChat]);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Navbar setTotalViewed={setTotalViewed} setIsLogged={setIsLogged} />\n\t\t\t<div className='container mb-5 mt-2'>\n\t\t\t\t<h1>Chat</h1>\n\t\t\t\t<hr />\n\t\t\t\t<div\n\t\t\t\t\tclassName='container p-2 my-2 d-flex flex-column  overflow-auto'\n\t\t\t\t\tstyle={chatContainer}>\n\t\t\t\t\t{chat &&\n\t\t\t\t\t\tchat.map((converse, index) => {\n\t\t\t\t\t\t\tconst lastMessage = chat.length - 1;\n\t\t\t\t\t\t\t// console.log(conversation[lastMessage]);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tref={lastMessage ? setRef : null}\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tclassName={`d-flex flex-column rounded p-2 my-1 ${\n\t\t\t\t\t\t\t\t\t\tconverse.sender === 'You'\n\t\t\t\t\t\t\t\t\t\t\t? 'align-self-end align-items-end'\n\t\t\t\t\t\t\t\t\t\t\t: 'align-self-start'\n\t\t\t\t\t\t\t\t\t}`}>\n\t\t\t\t\t\t\t\t\t{console.log(converse.message)}\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName={`border rounded p-1 ${\n\t\t\t\t\t\t\t\t\t\t\tconverse.sender === 'You'\n\t\t\t\t\t\t\t\t\t\t\t\t? ' bg-success text-white'\n\t\t\t\t\t\t\t\t\t\t\t\t: 'bg-light'\n\t\t\t\t\t\t\t\t\t\t}`}>\n\t\t\t\t\t\t\t\t\t\t{converse.message}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className='small text-muted'>{converse.sender}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t</div>\n\n\t\t\t\t<div className='container align-self-end '>\n\t\t\t\t\t<form className='d-flex' onSubmit={onSubmitHandler}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid='message-input'\n\t\t\t\t\t\t\tvalue={message}\n\t\t\t\t\t\t\tonChange={(e) => setMessage(e.target.value)}\n\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type='submit' className='btn btn-success'>\n\t\t\t\t\t\t\tSend\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<Footer />\n\t\t</Fragment>\n\t);\n};\n\nconst chatContainer = {\n\theight: '60vh',\n};\n\nconst messageContainer = {\n\theight: '75vh',\n\toverflow: 'scroll',\n};\n\nexport default Chat;\n","/home/rohit/dev/tinder/client/src/pages/Index.js",["66","67"],"/home/rohit/dev/tinder/client/src/pages/Profile.js",[],"/home/rohit/dev/tinder/client/src/component/layout/Navbar.js",[],"/home/rohit/dev/tinder/client/src/pages/PageNotFound.js",[],"/home/rohit/dev/tinder/client/src/component/layout/Footer.js",[],"/home/rohit/dev/tinder/client/src/component/Image.js",[],"/home/rohit/dev/tinder/client/src/component/Loading.js",[],"/home/rohit/dev/tinder/client/src/uitls/history.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":3,"column":8,"nodeType":"74","messageId":"75","endLine":3,"endColumn":14},{"ruleId":"76","severity":1,"message":"77","line":33,"column":17,"nodeType":"74","endLine":33,"endColumn":28},{"ruleId":"76","severity":1,"message":"78","line":77,"column":5,"nodeType":"79","endLine":77,"endColumn":24,"suggestions":"80"},{"ruleId":"72","severity":1,"message":"81","line":141,"column":7,"nodeType":"74","messageId":"75","endLine":141,"endColumn":23},{"ruleId":"72","severity":1,"message":"82","line":24,"column":9,"nodeType":"74","messageId":"75","endLine":24,"endColumn":16},{"ruleId":"83","severity":1,"message":"84","line":168,"column":10,"nodeType":"85","endLine":173,"endColumn":12},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'moment' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["88"],"'messageContainer' is assigned a value but never used.","'loading' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [addToChat]",{"range":"91","text":"92"},[2020,2039],"[addToChat]"]